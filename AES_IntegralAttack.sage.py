
# This file was *autogenerated* from the file AES_IntegralAttack.sage
from sage.all_cmdline import *   # import sage library

_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_6 = Integer(6); _sage_const_4 = Integer(4); _sage_const_8 = Integer(8)
from sage.crypto.mq.rijndael_gf import RijndaelGF
rgf = RijndaelGF(_sage_const_4 , _sage_const_6 )

K = GF(_sage_const_2 **_sage_const_8 ,'x', x**_sage_const_8  + x**_sage_const_4  + x**_sage_const_3  + x + _sage_const_1  )
M = MatrixSpace(K, _sage_const_4 , _sage_const_4 )

state = rgf._hex_to_GF('11223344556677889912131415161718') # 16 Bytes

key = '331D0084B176C3FB59CAA0EDA271B565BB5D9A2D1E4B2892'
key_state = rgf._hex_to_GF(key)
key_schedule = rgf.expand_key(key_state)

first_round_key = key_schedule[_sage_const_0 ]

print(len(key_schedule))

full_rounds = _sage_const_3 

state = rgf.add_round_key(state,first_round_key)

for i in range(_sage_const_0 ,full_rounds):
  round_key = key_schedule[i+_sage_const_1 ]
  state = rgf.sub_bytes(state)
  state = rgf.shift_rows(state)
  state = rgf.mix_columns(state)  
  state = rgf.add_round_key(state,round_key)
  print("Round",i+_sage_const_1 )
  print(state)

#final round
round_key = key_schedule[full_rounds+_sage_const_1 ]
state = rgf.sub_bytes(state)
state = rgf.shift_rows(state)
state = rgf.add_round_key(state,round_key)

print("Last round:")
print(state)

